{
  "root": true,
  "env": {
    "node": true,
    "es6": true
  },
  "ignorePatterns": [
    "**/node_modules",
    "**/dist",
    "**/build",
    "setupTests.ts",
    "vitest.config.ts"
  ],
  "parser": "@typescript-eslint/parser",
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {}
    }
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
      "globalReturn": false
    },
    "ecmaVersion": 2020,
    "project": ["./tsconfig.json"],
    "sourceType": "module"
  },
  "extends": [
    "eslint:recommended",

    // eslint-plugin-react
    "plugin:react/recommended",

    // @typescript-eslint/eslint-plugin
    "plugin:@typescript-eslint/recommended",

    // eslint-import-resolver-typescript
    "plugin:import/typescript",

    // eslint-plugin-react-hooks
    "plugin:react-hooks/recommended",

    // eslint-plugin-storybook
    "plugin:storybook/recommended",

    // nextjs
    "next/core-web-vitals"
  ],
  "rules": {
    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#eslint
    "react/react-in-jsx-scope": "off",

    // We have to check this won't affect object iteral
    "no-multi-spaces": "warn",

    // We don't accept using js or ts file extensions for React component
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
    "react/jsx-filename-extension": [
      "error",
      { "extensions": [".tsx", ".jsx"] }
    ],

    // Enforces coding style that user-defined JSX components are defined and referenced in PascalCase.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
    "react/jsx-pascal-case": ["error"],

    // Enforce the closing bracket location for JSX multiline elements.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
    "react/jsx-closing-bracket-location": ["error", "line-aligned"],

    // Enforce the closing tag location for multiline JSX elements.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md
    "react/jsx-closing-tag-location": ["error"],

    // We use default setting here.
    // {
    //   "closingSlash": "never",
    //   "beforeSelfClosing": "always",
    //   "afterOpening": "never",
    //   "beforeClosing": "allow"
    // }
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md
    "react/jsx-tag-spacing": ["error"],
    "react/jsx-curly-spacing": ["error", { "when": "never", "children": true }],

    // We are still considering about this rule
    // "react/forbid-dom-props": ["error", { "forbid": [] }],

    // Need to find best practice around this rule
    // We let nextjs Image use className and style
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md
    "react/forbid-component-props": [
      "error",
      {
        "forbid": [
          {
            "propName": "style",
            "allowedFor": ["Image"],
            "message": "Avoid using style"
          },
          {
            "propName": "className",
            "allowedFor": ["Image", "Link"],
            "message": "Avoid using className"
          }
        ]
      }
    ],

    // Disable react/no-unknown-property for Nextjs style jsx
    "react/no-unknown-property": [
      "error",
      {
        "ignore": ["jsx", "global"]
      }
    ]
  },
  "overrides": [
    {
      // For performance run jest/recommended on test files, not regular code
      "files": ["**/?(*.)+(test).{js,jsx,ts,tsx}"],
      "extends": ["plugin:testing-library/react"],
      "rules": {
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-object-literal-type-assertion": "off",
        "@typescript-eslint/no-empty-function": "off"
      }
    },
    {
      // We use playwright eslint plugin on e2e test
      "files": ["e2e/*.spec.{js,ts}"],
      "extends": ["plugin:playwright/playwright-test"]
    },
    {
      // To disambiguate unit from e2e (playwright) test files, the *.spec.ts
      // is used across this repo, so we can apply a different ruleset.
      "files": ["*.spec.ts"],
      "rules": {
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-object-literal-type-assertion": "off",
        "@typescript-eslint/no-empty-function": "off"
      }
    },
    {
      "files": ["**/*.{ts,tsx}"],
      "rules": {
        // Disable React.FC missing in props validation error (react/prop-types)
        "react/prop-types": "off",
        "react/require-default-props": "off"
      }
    },
    {
      "files": ["*.js"],
      "parser": "espree",
      "parserOptions": {
        "ecmaVersion": 2020
      },
      "rules": {
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "sonarjs/no-duplicate-string": "off",
        "sonarjs/no-all-duplicated-branches": "off",
        "@typescript-eslint/consistent-type-exports": "off",
        "@typescript-eslint/consistent-type-imports": "off",
        "import/order": "off"
      }
    }
  ]
}
