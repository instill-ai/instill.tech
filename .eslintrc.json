{
  "extends": "next/core-web-vitals",
  "rules": {
    // We have to check this won't affect object iteral
    "no-multi-spaces": "warn",

    // We don't accept using js or ts file extensions for React component
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx", ".jsx"] }],

    // Enforces coding style that user-defined JSX components are defined and referenced in PascalCase.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
    "react/jsx-pascal-case": ["error"],

    // Enforce the closing bracket location for JSX multiline elements.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
    "react/jsx-closing-bracket-location": ["error", "line-aligned"],

    // Enforce the closing tag location for multiline JSX elements.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md
    "react/jsx-closing-tag-location": ["error"],

    // We use default setting here.
    // {
    //   "closingSlash": "never",
    //   "beforeSelfClosing": "always",
    //   "afterOpening": "never",
    //   "beforeClosing": "allow"
    // }
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md
    "react/jsx-tag-spacing": ["error"],
    "react/jsx-curly-spacing": ["error", { "when": "never", "children": true }],

    // We are still considering about this rule
    // "react/forbid-dom-props": ["error", { "forbid": [] }],

    // Need to find best practice around this rule
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md
    "react/forbid-component-props": ["error", { "forbid": ["className", "style"] }],

    // Will extend when needed
    // global and jax is for inline style css
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md
    "react/jsx-boolean-value": ["error", "always", { "never": ["global", "jsx"] }],

    // This is a little complex, please go to its docu to learn how to build around this rule
    // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/alt-text.md
    "jsx-a11y/alt-text": [
      "error",
      {
        "elements": ["img", "object", "area", "input[type=\"image\"]"],
        "img": ["Image"],
        "object": ["Object"],
        "area": ["Area"],
        "input[type=\"image\"]": ["InputImage"]
      }
    ],

    // Will extend when we extend language base
    // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md
    "jsx-a11y/img-redundant-alt": [
      "warn",
      {
        "components": ["Image"],
        "words": ["picture", "image", "photo", "照片"]
      }
    ],

    // Elements with ARIA roles must use a valid, non-abstract ARIA role.
    // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md
    "jsx-a11y/aria-role": [
      "warn",
      {
        "ignoreNonDOM": true
      }
    ],

    // Enforce no accessKey prop on element.
    // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md
    "jsx-a11y/no-access-key": ["error"],

    // Prevent usage of Array index in keys
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md
    "react/no-array-index-key": "error",

    // Setting ref with string had already been considered legacy
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md
    "react/no-string-refs": ["error", { "noTemplateLiterals": true }],

    // We enforce self-close to cut down maintain overhead
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    // Declaring only one component per file improves readability and reusability of components.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
    "react/no-multi-comp": ["error", { "ignoreStateless": false }]
  }
}
